// src/services/chatbotService.local.ts
// Lightweight multilingual conversational bot ‚Äì responds naturally in user's language.

export type SupportedLang = "en" | "es" | "fr" | "de" | "hi";

export interface ChatMessage {
  id: string;
  text: string;
  isBot: boolean;
  timestamp: Date;
  intent?: string;
}

let currentLang: SupportedLang = "en";

const nowId = (prefix: string) =>
  `${prefix}_${Date.now()}_${Math.random().toString(36).slice(2, 8)}`;

const nameToLang: Record<string, SupportedLang> = {
  english: "en",
  hindi: "hi",
  spanish: "es",
  french: "fr",
  german: "de",
  deutsch: "de",
};

// üîπ Detect input language (basic regex)
function detectLanguage(text: string): SupportedLang {
  const t = text.trim();
  if (/\p{Script=Devanagari}/u.test(t)) return "hi";
  if (/[√§√∂√º√Ñ√ñ√ú√ü]/.test(t)) return "de";
  if (/[√±√ë¬°¬ø]|[√°√©√≠√≥√∫√Å√â√ç√ì√ö]/.test(t)) return "es";
  if (/[√ß≈ì√©√®√†√π√¢√™√Æ√¥√ª]/i.test(t)) return "fr";
  return "en";
}

function extractRequestedLanguage(text: string): SupportedLang | null {
  const lower = text.toLowerCase();
  const match = lower.match(/\b(in|reply|answer)\s+in\s+([a-z]+)/);
  if (match) {
    const langName = match[2];
    for (const key in nameToLang) {
      if (langName.includes(key)) return nameToLang[key];
    }
  }
  return null;
}

// üîπ Simple intent recognition
function detectIntent(text: string) {
  const t = text.toLowerCase();

  if (/\b(who are you|your name|comment tu t'appelles|wie hei√üt du|‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§∞‡§æ ‡§®‡§æ‡§Æ)\b/.test(t))
    return "name";
  if (/\b(hello|hi|hola|bonjour|hallo|‡§®‡§Æ‡§∏‡•ç‡§§‡•á)\b/.test(t)) return "greet";
  if (/\b(good night|bonne nuit|buenas noches|gute nacht|‡§∂‡•Å‡§≠ ‡§∞‡§æ‡§§‡•ç‡§∞‡§ø)\b/.test(t)) return "good-night";
  if (/\b(good morning|buenos d√≠as|bonjour|guten morgen|‡§∂‡•Å‡§≠ ‡§™‡•ç‡§∞‡§≠‡§æ‡§§)\b/.test(t))
    return "good-morning";

  return "fallback";
}

// üîπ Replies database (short & natural)
const replies: Record<string, Record<SupportedLang, string>> = {
  greet: {
    en: "Hello!",
    es: "¬°Hola!",
    fr: "Bonjour !",
    de: "Hallo!",
    hi: "‡§®‡§Æ‡§∏‡•ç‡§§‡•á!",
  },
  name: {
    en: "I am LingoBot.",
    es: "Soy LingoBot.",
    fr: "Je m'appelle LingoBot.",
    de: "Ich hei√üe LingoBot.",
    hi: "‡§Æ‡•á‡§∞‡§æ ‡§®‡§æ‡§Æ ‡§≤‡§ø‡§Ç‡§ó‡•ã‡§¨‡•â‡§ü ‡§π‡•à‡•§",
  },
  "good-night": {
    en: "Good night!",
    es: "¬°Buenas noches!",
    fr: "Bonne nuit !",
    de: "Gute Nacht!",
    hi: "‡§∂‡•Å‡§≠ ‡§∞‡§æ‡§§‡•ç‡§∞‡§ø!",
  },
  "good-morning": {
    en: "Good morning!",
    es: "¬°Buenos d√≠as!",
    fr: "Bonjour !",
    de: "Guten Morgen!",
    hi: "‡§∂‡•Å‡§≠ ‡§™‡•ç‡§∞‡§≠‡§æ‡§§!",
  },
  fallback: {
    en: "I'm here to chat! Ask me something else.",
    es: "¬°Estoy aqu√≠ para charlar! Preg√∫ntame algo m√°s.",
    fr: "Je suis l√† pour discuter ! Pose-moi une autre question.",
    de: "Ich bin hier zum Plaudern! Frag mich etwas anderes.",
    hi: "‡§Æ‡•à‡§Ç ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Å ‡§π‡•Ç‡§Å! ‡§ï‡•Å‡§õ ‡§î‡§∞ ‡§™‡•Ç‡§õ‡•á‡§Ç‡•§",
  },
};

// üîπ Generate reply in proper language
function generateReply(intent: string, lang: SupportedLang) {
  return replies[intent]?.[lang] || replies["fallback"][lang];
}

/* ------------------------ API ------------------------ */
async function sendWelcomeMessage() {
  return {
    id: nowId("bot"),
    text: "üëã Hello! I'm ready to chat with you in any language.",
    isBot: true,
    timestamp: new Date(),
  };
}

async function sendMessage(userText: string) {
  const explicitLang = extractRequestedLanguage(userText);
  const detectedLang = detectLanguage(userText);
  const lang = explicitLang || detectedLang || currentLang;
  currentLang = lang;

  const intent = detectIntent(userText);
  const reply = generateReply(intent, lang);

  return {
    messages: [
      { id: nowId("user"), text: userText, isBot: false, timestamp: new Date() },
      { id: nowId("bot"), text: reply, isBot: true, timestamp: new Date(), intent },
    ],
  };
}

function resetSession() {
  currentLang = "en";
}

export const chatbotService = { sendWelcomeMessage, sendMessage, resetSession };
